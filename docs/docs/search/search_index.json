{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MODAQ 2.0 Reference Design","text":"<p>Note</p> <p>These documents are still under development. Please contact the open-water testing support team at NREL for more information. Contact Us</p> <p>NREL's first generation MODAQ is a highly performant, capable, and extensible platform for data acquisition, control, and automation that is based on the National Instruments cRIO controller line and family of expansion chassis and I/O modules. While MODAQ v1.0 (M1, hereafter) has proven itself in both the field and laboratory, several factors have indicated the need for additional solutions that were not well served on the M1 architecture, which led to the development of MODAQ v2.0 (M2). M2 is an approach based on generally available hardware and open-source development tools. </p>"},{"location":"#motivation","title":"Motivation","text":"<p>Before diving too deeply into the details, it's important to understand the motivation behind M2. There were several reasons, but they all boil down to either: </p> <ol> <li>We did not have a solution that satisfied particular project requirements, or</li> <li>Feedback from customers and partners </li> </ol> <p>In the case of #1, projects may have power or physical limitations that simply could not be met with any cRIO-based M1 variant. What was often the case is that we needed a solution that could be powered by batteries or otherwise have low power consumption. While our go-to cRIO (9049) in M1 is relatively power efficient (60W at maximum load), it's not practical for battery or power constrained applications. And despite its compactness, it can be too big (and heavy) for some use cases. Further, a cRIO was often overkill for some applications. While the cRIO scales up nicely, it does not scale well in the other direction. </p> <p>With regards to feedback from the companies and organizations we frequently work with, there's often resistance to the M1 platform based on system cost or universality of the software development language- or both. </p> <p>National Instruments publishes the price of its hardware on their website without the dreaded \"Click for Quote\" obfuscation, so it's easy to get an idea of the price range for the controller and I/O modules. With strained budgets and an eye toward the future, where an organization may be considering arrays of devices or multiple device variants, it can be questionable if the M1 platform is a good fit, particularly when considering a pivot to production. </p> <p>Then there's the concern about the development language. M1 is written in LabVIEW, which is National Instruments' proprietary programming language. Here the issues are mostly around subscription costs and availability of LabVIEW developers. There's no sugar-coating that annual subscription costs for a LabVIEW Professional seat can be eye-opening- especially after bundling the Real-Time and FPGA modules. </p> <p>Aside from the cost, availability of skilled LabVIEW developers pales in comparison to that of languages such as Python or C/C++. LabVIEW does not even appear in popular development language rankings. While it might not be fair to compare LabVIEW to general-purpose languages - and it's probably fairer to compare it to industrial programming languages such as those used for PLC or other vendor-specific packages - the fact remains that LabVIEW is rather niche and there's not an abundance of well-rounded engineers that just happen to be competent in LabVIEW in the job market. </p> <p>The intent here is not to bash on NI or LabVIEW, but rather to point out some of the challenges involved when collaborating with commercial enterprises- and even academia to some degree. We use NI and LabVIEW extensively at NREL and appreciate how it enables rapid development of data acquisition and control systems, complete with graphical user interfaces, for test setups. Some of us have experience in this ecosystem dating back to the 1900's! </p>"},{"location":"#m2-goals-and-design-requirements","title":"M2 Goals and Design Requirements","text":"<p>There is little point to developing a new system without first establishing some overarching goals. Much of this can be gleaned from the previous motivation section, but here we explicitly state the goals we're trying to achieve with M2. </p> <p>The primary goals of MODAQ 2.0 are to:</p> <ul> <li>Develop hardware and software architectures that can adapt to a wide range of missions and use-cases</li> <li>Assure measurement performance and quality parity with M1</li> <li>Utilize a development stack based on popular programming languages and tools</li> <li>Avoid vendor lock-in and single-source solutions</li> </ul> <p>... and some Design Requirements:</p> <ul> <li>Modularity in both the design of the hardware and software</li> <li>Support a range of controller options and I/O types</li> <li>Ruggedized durability and 24/7 performance  </li> <li>Precision time keeping and synchronization</li> <li>Real-time, deterministic performance</li> <li>Support for common communications protocols </li> <li>Configuration through a text-based file or utility</li> <li>Supervisory and automation control capability</li> <li>HMI and web-based data dashboard</li> <li>Built-in AWS S3 and SMTP support</li> </ul>"},{"location":"configurator/","title":"Configurator","text":""},{"location":"configurator/#m2-configurator","title":"M2 Configurator","text":"Configurator NREL-MODAQ2 Repo: NREL-MODAQ2/configurator <p>Several parameters within M2 can be configured through the use of a yaml file that is located in <code>/src/m2_core/m2_launch/config</code>. This allows the M2 source code to be somewhat stateless, while allowing common or project-specific changes to be applied at runtime. </p> <p>While the yaml file is plain text and can be edited in any basic text editor, this is not recommended since invalid inputs or formatting errors could result in unintended settings or render the file unusable. The Configurator exposes all available configurable items for the selected M2 nodes and performs validation on user inputs.</p>"},{"location":"configurator/#features","title":"Features","text":"<ul> <li>Edit an existing configuration or create a new one from scratch</li> <li>Auto archiving of loaded config files</li> <li>Message box at bottom of window to display context-aware help or error info</li> <li>Input validation to assure values typed by user are acceptable</li> <li>Light/dark mode</li> </ul> Figure 1. M2 Configurator screencap. Mouse over to reveal legend. <p>if you mouse over the image above, reference numbers appear next to the GUI elements that correspond to the following list of explanations:</p> <ol> <li>Load Config button: This will open a file browser window for loading an existing configuration. A copy of the loaded file will automatically get created as a backup. This is unnecessary when creating a new configuration.</li> <li>Write to File button: When done editing a configuration, select this button to save the configuration to a yaml file.</li> <li>Switch between light and dark modes.</li> <li>Node selection pane. A node is an M2 software module containing configurable items that is launched as part of functional M2 system. (see: ROS2 Nodes)</li> <li>Selection dropdown for available nodes that can be added to the configuration.</li> <li>Window showing nodes that have been added to the configuration. If an existing  configuration was loaded, the nodes in that file will populate here. On a new configuration, this window will be empty until nodes are added from the dropdown box (5).</li> <li>Rename the selected node. Please see section XXX for node naming guidance.</li> <li>Delete the selected node. Use with caution: there is no undo for this.</li> <li>Configuration pane</li> <li>Window for viewing and editing configuration values.</li> <li>Double clicking on a value will enable editing of that value. Some items, such as Channel Names may have more than one value. In these instance, double clicking on the text will expand (or unhide) the values.</li> <li>Example of the expanded view for parameters with multiple values. These can be edited or deleted individually. New values can be inserted (up to limits specified in the schema).</li> <li>Delete Selection button: this will delete the highlighted parameter and value. There is no undo.</li> <li>Insert Here button: On Parameters with multiple values, a new value can be inserted at the highlighted location. NOTE: new parameters cannot be added, only new values for existing multi-value parameters. </li> <li>Message Box: Helpful test will appear here as the user mouses over elements in the Configuration pane. </li> </ol>"},{"location":"configurator/#getting-started","title":"Getting Started","text":"<p>The M2 Configurator is written in Python and uses a couple of popular libraries. Our original intent was to offer standalone executable versions of this code so that it would not be necessary for end users to have or install python on their systems. However, executables may be blocked by policy on managed computer systems or flagged as potential malware due to the lack of a signed certificate. Since, it's assumed the likely users of the M2 Reference Design and this configurator have some level of skill with programming, we're distributing just the source code and the following setup guide. Users can compile executables if so desired using utilities such as Pyinstaller. </p>"},{"location":"configurator/#recommended-setup","title":"Recommended Setup","text":"<p>While not absolutely necessary, we do recommended creating a Python virtual environment to edit and run the Configurator. The virtual environment or venv encapsulates python and the required libraries in a separate 'workspace' and has certain benefits. If you prefer not to use a venv, skip steps 2 and 3 below.</p> <ol> <li>In a terminal, navigate to or create a folder for your M2 Configurator workspace.</li> <li>Create a new venv for the M2 Configurator workspace: <code>python3 -m venv modaq_venv</code> (replace modaq_venv with your preferred name)</li> <li>Activate the workspace: MacOS/Linux: <code>source modaq_venv/bin/activate</code> or <code>source ./modaq_venv/bin/activate</code> Windows (cmd): <code>modaq_venv\\Scripts\\activate</code> or <code>modaq_venv\\Scripts\\activate.bat</code> Windows (PowerShell): <code>modaq_venv\\Scripts\\Activate.ps1</code></li> <li>Install required libraries. <ul> <li><code>pip install -r requirements.txt</code> or if you prefer not to use our requirements.txt file</li> <li><code>pip install PyYAML customtkinter CTKMessagebox CTKListbox</code></li> <li><code>pip freeze &gt; requirements.txt</code> </li> </ul> </li> <li>Place the M2 Configurator python script (m2conf.py) and schema (m2_config_schema.yaml) in the workspace folder.</li> <li>Done!</li> </ol>"},{"location":"configurator/#how-to-use","title":"How to Use","text":"<p>Assure that the venv has been activated (if using a virtual environment) then launch the Configurator: e.g. <code>python m2conf.py</code> </p> <p>Note</p> <p>The numbers shown in parentheses below correspond to the numbers revealed when mousing over Figure 1.</p> <p>An existing M2 yaml configuration file can be loaded for editing or a new one created from scratch. Much of the Configurator operation is the same either way. </p>"},{"location":"configurator/#load-an-existing-configuration-file","title":"Load an Existing Configuration File","text":"<p>Select Load Config button (1) and select existing yaml file from file dialog box that pops up. The M2 nodes available in that configuration file will be populated to the node selection listbox (6).</p>"},{"location":"configurator/#starting-from-scratch","title":"Starting from Scratch","text":"<p>Select the Add Node dropdown box (5) and select a node to add to the configuration in the node selection listbox (6). Repeat this process until all nodes are added to listbox. </p> <p>Warning</p> <p>Do not add two or more of the same node type without first renaming the node after it it added. For instance, if you want add two LabJackAIN nodes, add one to the listbox, then highlight it and rename it. Then add the second. Failure to do this will cause unpredictable results- but usually you'll just have 2 entries in the Node List for the same node (they won't be unique- even if renamed later). </p>"},{"location":"configurator/#viewing-and-editing-the-configuration","title":"Viewing and Editing the Configuration","text":"<p>Selecting any node that appears in the listbox (6) so that it is highlighted will result in its associated Parameters and Values (key/value pairs) being displayed in the Configuration Values (10) window. </p> <p>Parameters can be highlighted by mouse selection and help or info text for that parameter will appear in the Message Box (15). A highlighted parameter and its value(s) can be deleted with the Delete Selection button. However there is no undo for this and inserting new parameters is currently not possible within the Configurator. </p> <p>The Values side of the Configuration Values window is editable. Double clicking on any value will allow the cell to be modified. Pay attention to the help text in the Message Box (15) for the type and/or format of input expected (e.g. integer, float, string, IP address, etc.). The configurator does perform some input validation (watch the Message Box for feedback), however some improper inputs may be accepted- particularly string type inputs. </p> <p>Some Parameters/Keys expect allow for more than one value. These values are displayed collapsed with <code>&lt;double click to expand&gt;</code> to show the list. Editing, deleting, and inserting are allowed in these lists. Some parameters have limits on the number of values that can be added to a list. For instance an 8 channel analog input node cannot have more than 8 channel names configured. The Configurator will warn the user if they attempt to add more values than the parameter supports in the Message Box.</p> Q&amp;A <p>Q: Why can't I add a new parameter to a node?  A: The C++ code for a node must be specifically written to accept configurable values at launch. All such configurable values for a node are already presented when a node is added to the configuration.<p> Q: What happen with M2 if I deleted a parameter, will it still work? A: Depending on which parameter was deleted there may be no noticeable impact to the operation of M2. This is because all configurable parameters are hard-coded with default values that are used if values are not passed in at launch. However, those default values may cause undesirable behavior if a parameter is missing such as with email addresses or file paths.<p> Q: How do I get a parameter back if I accidentally delete it? A: At this time, there is no direct way to insert a parameter- maybe in a future release. However as a workaround, delete the entire node from the node listbox and add the node back again. Any previous edits on the deleted node will be lost, but the deleted parameter will now be available. <p> Q: I renamed a node and it does not work when I launch the M2 code A: Node names in the configurator must match their launch names in the M2 code see: Link.  </p>"},{"location":"configurator/#saving-a-configuration","title":"Saving a Configuration","text":"<p>The edited configuration can be saved to a file by selecting the Write to File button. A file dialog will appear with either the loaded filename prepopulated (in the case of a loaded config) or a default name (in the case of a new configuration). The user can override this and name the file something else- however this filename must match the config filename specified in the M2 launch file (see: Link). </p>"},{"location":"configurator/#technical-details","title":"Technical Details","text":"<p>The M2 Configurator is written entirely in Python 3.12 (specifically: 3.12.7) and is using Tkinter from the standard library for creating the GUI with added visual flare from CustomTkinter (along with the widgets CTKListbox and CTKMessagebox).</p> <p>The code is organized as a collection of classes that encapsulate the various GUI elements. </p> <ul> <li>importance of the schema</li> </ul>"},{"location":"configurator/#known-issues","title":"Known Issues","text":"<p>There are some known issues present in this release of the M2 Configurator. These are expected to be addressed at a later time, but are considered either 'Quality of Life' or edge-case issues- so not critical.</p> <ul> <li>Values window (treeview) does not have a dark mode</li> <li>If a user inputs a float where an int is expected, operation will not complete and displays an error in the message box. Expected behavior is to coerce float to an int- however this 'bug' might be considered a feature since it requires the user to fix the erroneous input.</li> <li>If user renames a node to a name that already exists in the listbox, weirdness ensues. Need to add a check to the validation method to prohibit duplicate names.</li> <li>Similarly, if a user adds two (or more) nodes of the same node to the listbox from the dropdown menu, they will not be unique- rather they point to the same object. Workaround is to add the first node and rename it, then add the second node. This is more commonly a problem with larger M2 designs that have multiple input modules of the same type, such as 2 LabJacks performing analog input operations.</li> <li>If an existing config is loaded that contains nodes named differently than the names used in the schema and does not contain a valid schema_template key, any edits in the Configuration Values window (ValuesFrame) will throw an error.</li> <li>It's possible on some systems that the executable version of the configurator may be disallowed either due to policy (managed computer and user does not have sufficient permissions) or malware detection (the app is distributed without a signed certificate). For these reasons, a standalone executable of the configurator app will not be offered on this repo. </li> </ul>"},{"location":"configurator/#acknowledgements","title":"Acknowledgements","text":"<p>The in-place editing technique used in this app, which allow for double-clicking on an item to change its value in the Configuration pane is based on a tutorial published on CodersLegacy.com. </p>"},{"location":"github/","title":"Github","text":""},{"location":"github/#m2-github","title":"M2 Github","text":"<p>This section will discuss the layout of the MODAQ 2 codebase on Github.</p>"},{"location":"github/#github-organization-nrel-modaq2","title":"Github Organization: NREL-MODAQ2","text":"<p>Because MODAQ 2 is designed to be modular, it was laid out using an organization in Github which can be found at this link:  NREL-MODAQ2. This enables the ability to clone or copy the necessary modules for your specific implementation of MODAQ 2. The main reason of taking this approach to software organization is to streamline the set up of a new system and streamline contributing to the open-source MODAQ 2 project.</p>"},{"location":"github/#building-a-modaq-2-system","title":"Building a MODAQ 2 System","text":"<p>It is recommended to utilize git and Github/Gitlab for building a MODAQ 2 system to efficiently track changes and maintain version control. We recommend initializing a new repo on your Github account and brining in the necessary modules for your project. You can also add any modules you may need that currently aren't available from the NREL-MODAQ2 organization. These are the steps to do this:</p> <ol> <li>Login or make an account on github.com   </li> <li>Make a new repository on your account - we recommend including the ROS .gitignore template</li> <li>Start your development computer and navigate to the folder you want to keep your repo in. I.e. <code>cd ~</code></li> <li>Clone the repository you just created to your development computer using <code>git clone https://github.com/{your_account}/{your_repo}.git</code></li> <li>Move into your repository and create a src directory using <code>cd {your_repo}</code> and <code>mkdir src</code></li> <li>Clone the NREL-MODAQ2 repositories you need into the src folder with <code>git clone https://github.com/NREL-MODAQ2/{repos_you_need}.git</code></li> <li>To be able to push your build to your new github repository, you will need to delete the .git folder from the repos you have cloned. <code>cd m2_core</code> and <code>sudo rm .git -r</code></li> <li>You can now commit and push your code stack to github and it will be detached from the NREL-MODAQ2 organization</li> <li>Please consider contributing to the NREL-MODAQ2 organization if you have changes the community can benefit from. This process is described below.</li> </ol> <p>Note</p> <p>You will likely need to set up a personal access token to clone and push to your github repo. Visit this link to learn how to do that. Link</p>"},{"location":"github/#contributing-to-modaq2-with-github-submodules","title":"Contributing to MODAQ2 with Github Submodules","text":"<p>When contributing to the NREL-MODAQ2 organization, it is recommended to fork the NREL-MODAQ2 repos you are using and bring in them into your main repository as git submodules. This is essentially adding a git repo inside another git repo. The changes tracked in the submodule are actually relative to the repo of the submodule rather than the broader repo. Say you make a change to the labjack_t8_ros2 package that would be useful for everyone who uses labjacks, you can make a pull request on the labjack_t8_ros2 repo and your changes could help out all users of MODAQ 2. This meets our project requirement of maximizing modularity for MODAQ 2 users.</p> <p>All of the current packages/modules for MODAQ 2 can be found on the Github Organization.</p> <p>To fork the repositories you are using, follow these steps:</p> <ol> <li>Login or make an account on github.com</li> <li>Navigate in your browser to the NREL-MODAQ2 package you are wanting to contribute to</li> <li>Click the fork button in the top right corner</li> <li>Navigate to your personal fork of the repo. You can find it on your github account in your repositories</li> <li>Get the URL of your personal fork. I.e. https://github.com/{your_account}/m2_core.git</li> </ol> <p>The recommended process for getting started with submodules is to start a top level repo which will hold the submodules: <pre><code>cd #go home\nmkdir MODAQ2-Dev #this directory should be named based on your project name\ncd MODAQ2-Dev\ngit init #init the top level repo\nmkdir src #all ros2 packages should be in the src directory\ncd src\ngit submodule add https://github.com/{your_account}/m2_core.git #this is the main module for MODAQ 2\ngit submodule add {Other MODAQ 2 packages/modules}\n</code></pre></p> <p>Now your fork of m2_core is a submodule in your MODAQ2-Dev repo. Changes you make to m2_core will be tracked locally to the m2_core forked repo.</p> <p>To contribute your changes, push to your forked repo and then open a pull request to the repo on NREL-MODAQ2 on Github.com</p> <p>More information on forking, submodules and pull request can be found in the Useful Links</p>"},{"location":"hardware/","title":"Hardware","text":""},{"location":"hardware/#m2-hardware","title":"M2 Hardware","text":"<p>This section will discuss the hardware supported by M2 and present a reference design (RD) example that is supported by the M2 source code provided in the GitHub repository. It should be noted that any hardware mentioned has been either used in or evaluated for M2 projects, however this should not be interpreted as an endorsement or approval of any mentioned hardware product by NREL. Due to the general and flexible nature of the M2 software, M2 applications are not necessarily limited to these hardware selections. </p> <p>Note</p> <p>Reliability, durability, and suitability of hardware selections should be assessed prior to use in applications of significance. General purpose hardware may vary in design or production tolerances that can result in operational or performance differences between units and batches. </p>"},{"location":"hardware/#hardware-reference-design","title":"Hardware Reference Design","text":"<p>The purpose of providing this reference design is to offer a functional demonstration of the M2 platform. Since each project tends to be unique and measurement objectives can vary considerably, there is no typical configuration that will satisfy all situations. However, there's usually significant overlap in base functionality that is common in MODAQ projects, such as: measuring analog signals, motions, position, and temperatures. </p> <p>The following is a diagram of the M2 Reference Design discussed in these pages.</p> <p></p> <p>Equipment List</p> Brand Model Qty Description OnLogic Karbon 410 1 Controller LabJack T8 1 Multi-I/O Perle IDS-710HP<sup>1</sup> 1 PoE/PTP Ethernet Switch Cradlepoint IBR-600C<sup>2</sup> 1 LTE Modem Adv. Nav. GNSS Compass 1 Heading, GPS, PTP Server Xsens MTi-G-710 1 Inertial Sensor Verivolt IsoBlock V-4c 1 Voltage Sensor (PT) Verivolt IsoBlock I-ST-4c 1 Current Sensor (CT) BrainBoxes ED-582 1 RTD to Ethernet Samsung T5 1 SSD Storage"},{"location":"hardware/#modular-architecture","title":"Modular Architecture","text":"<p>M2 is designed with a modular approach that enables flexible hardware configurations and use of devices from various manufacturers and connection types. </p> <p>Many of the devices supported in this RD communicate with the controller over ethernet (TCP/IP). Ethernet brings the following advantages: </p> <ol> <li>Connection simplicity: Devices can be connected using standard networking components</li> <li>PoE: Some devices may support Power over Ethernet, which further reduces the wiring complexity. </li> <li>Flexible hardware placement: I/O modules that are TCP/IP capable can be moved closer to the measurement location, which reduces sensor/instrument wiring run lengths and the likelihood of signal corruption from noise sources. An M2 can be architected in zones or as a distributed system.</li> </ol> <p>Note</p> <p>Ethernet is non-deterministic and may not be suitable in time-critical applications that rely on precision timing and synchronization. Read more here.</p>"},{"location":"hardware/#controller","title":"Controller","text":"<p>M2 currently supports controller hardware based on the x86_64 CPU architecture. Examples of such CPUs include the Intel Pentium, Atom, and Celeron series chips, as well as higher-powered variants in the Core series. Some considerations for CPU selection include:</p> <ul> <li>Power efficiency</li> <li>Performance expectations</li> <li>Number of processing cores and threads</li> </ul> <p>The controller main board will include a preinstalled CPU. Some main boards may offer a CPU selection, however most do not. When selecting a main board, it's necessary to balance onboard features and specifications against the CPU capabilities. </p> <p>Depending on the application, the main board might be sold as a Single Board Computer (SBC) or be prepackaged in an enclosure or case (e.g. industrial PC). It's recommended to avoid general-purpose consumer oriented boards and instead look for boards targeted for industrial or embedded applications. Some devices marketed for 'Edge' computing may also be suitable. Desireable features in a main board might include:</p> <ul> <li>Minimum of 4 GB RAM</li> <li>M.2 slots that support NVMe (or SATA) SSD storage </li> <li>Multiple USB ports (3.0 or greater preferred)</li> <li>At least one gigabit (or better) ethernet port</li> <li>Video display interface</li> <li>Precision Time Protocol (PTP, IEEE 1588v2) support in ethernet controller (e.g. Intel i210)</li> <li>Real Time Clock (RTC) with battery backup</li> <li>Serial communications port (RS-232/RS-485/UART)</li> <li>Wide input voltage tolerances</li> </ul> <p>Depending on the operating environment, it might be desireable to select a model that is rated for a wide operational temperature and humidity range. </p> <p>Note</p> <p>The above features are preferred, but not mandatory. Individual use-cases and performance requirements may indicate need for greater or fewer capabilities. </p> <p>The following are examples of some controller options that have been evaluated for M2.</p>"},{"location":"hardware/#onlogic-karbon-410","title":"Onlogic Karbon 410","text":"<p> While there are many vendors that sell ready-made rugged, industrial computers, we selected the relatively low-cost and modestly equipped Karbon 410 from Onlogic for evaluation as a mid-range M2 controller.  </p> <p>The Karbon 410 is a fanless design and comes in a heavy-duty rail-mountable enclosure with a large passive heatsink. Specification-wise, it includes all of the desirable features listed in the previous section and can be optioned with either GPIO or two serial ports (RS-232/422/485). </p> <p>Some notable features of the K410:</p> <ul> <li>Choice of either a dual or quad core Atom CPU</li> <li>Intel i210 ethernet controllers support PTP</li> <li>9-48 VDC input power range</li> <li>Carries numerous regulatory certifications, including for shock and vibration</li> <li>Full-stress power draw (when equipped with Atom x6211E CPU) is &lt;15W and can deep sleep &lt;&lt;1W</li> </ul>"},{"location":"hardware/#odroid-h3","title":"ODROID H3","text":"<p> The ODROID H3 is a very low cost fanless single board computer with a quad core Celeron N5105 CPU. it's a basic, moderately powered performer that lacks the ruggedization and certification bona fides of the K410, however it's versatile and well equipped. </p> <p>Some notes on the H3:</p> <ul> <li>Small 110x110mm footprint</li> <li>Dual SODIMM DDR4 RAM slots and one NVMe m.2 slot</li> <li>PTP support on the Realtek RTL8125B ethernet controllers requires some effort and not as robust as the Intel ethernet controllers.<sup>3</sup></li> <li>Supports input power in the range of 14-20 VDC, which is a little unusual.</li> <li>Full stress power consumption is ~18W and &lt;1W in suspend mode</li> </ul>"},{"location":"hardware/#sensors-instruments-and-io-options","title":"Sensors, Instruments, and I/O Options","text":"<p>The M2 Reference Design includes support for the following devices:</p> <ul> <li>LabJack T8</li> <li>Xsens MTi-G-710 GNSS/INS</li> <li>Advanced Navigation GNSS Compass</li> <li>Brainboxes ED-582 </li> </ul> <p>These provide the following capabilities:</p> <ul> <li>\u00b110 VDC analog input and output</li> <li>4-20 mA current loops</li> <li>Logic level digital input and output (also known as TTL or DIO)</li> <li>Position, heading, velocity, acceleration, rotation, and orientation</li> <li>IEEE-1588v2 PTP time server</li> </ul> <p>Note</p> <p>The devices listed will work on either controller mentioned in the previous section.</p> <p>M2 supports considerably more hardware options than are included in the Reference Design distribution. Contact us to learn more. </p>"},{"location":"hardware/#labjack-t8","title":"LabJack T8","text":"<p>The LabJack T8 provides a lot of useful I/O in a single highly performant ethernet or USB connected device.  </p> <p>Some highlights:</p> <ul> <li>8 simultaneous sampling 24-bit analog to digital converters (ADC), with channel-to-channel isolation and sampling up to 40 kHz</li> <li>Up to 20 channels of digital I/O (DIO)</li> <li>USB or ethernet connectivity- can also be powered by USB or PoE</li> <li>Available option for 14-bit \u00b110 VDC digital to analog (DAC) output</li> <li>Available option for 4-20 mA current loop input</li> </ul> <p>The Reference design includes nodes to stream the ADC channels at up to 40 kHz or read the channels on demand. It also includes nodes to command an output voltage to the DAC module and read/write to the DIO. </p>"},{"location":"hardware/#brainboxes-ed-582","title":"BrainBoxes ED-582","text":"<p>The ED-582 is a simple solution for acquiring up to 4 RTD measurements over an ethernet connection. Each channel can be configured independently for either PT100 or PT1000 temperature sensors and their associated temperature coefficients. </p> <p>It has 16-bit resolution and can acquire at up to 5 samples per second- which provides just over 1 Hz sample rate with all 4 channels enabled. </p>"},{"location":"hardware/#xsens-mti-g-710","title":"Xsens MTi-G-710","text":"<p> The world of inertial sensors has a very broad price, performance, accuracy, and quality spectrum, ranging from cheap hobby grade to high-end, export-controlled devices costing many 10's of thousands of dollars. We tend to specify 'moderately' priced models such as the Xsens MTi-G-710 in many projects.  </p> <p>This device uses a sensor fusion engine to develop 3D orientation solutions using GNSS satellite signals and built-in 3-axis accelerometers, gyros, and magnetometers. </p>"},{"location":"hardware/#advanced-navigation-gnss-compass","title":"Advanced Navigation GNSS Compass","text":"<p>The M2 reference design includes support for the GNSS Compass from Advanced Navigation. This ethernet connected, PoE powered device includes a GNSS satellite receiver with RTK support, built-in dual antennas, and a PTP time server. </p> <p>This device is a compliment to the Xsens Mti-G-710, since the GNSS Compass, with it's dual antennas can provide a superior heading estimate and with an RTK correction signal available, can provide can provide superior positioning estimates. In addition, it can provide an estimate of heave and provides a highly accurate time reference for the M2 system. </p> <ol> <li> <p>Cheaper unmanaged switches could be substituted if PTP and/or PoE support not desired.\u00a0\u21a9</p> </li> <li> <p>IBR-600C has been recently discontinued. S700 looks like the most likely replacement.\u00a0\u21a9</p> </li> <li> <p>The newly released ODROID H4 comes with Intel I226-V ethernet controller chips, which have much better PTP support.\u00a0\u21a9</p> </li> </ol>"},{"location":"hmi/","title":"HMI","text":""},{"location":"hmi/#m2-hmi","title":"M2 HMI","text":"A Human-Machine Interface, or HMI, is a control panel or portal that enables high-speed, near realtime interaction with M2. It can display or plot values and allow for operator control of specifically coded elements running in M2- such as manual control of a relay.  <p>Typically, the HMI would be referred to as the frontend, while the bulk of the MODAQ code responsible for the actual data acquisition, control outputs, and general logic is considered the backend. </p> <p>M2 uses a standard web development stack consisting of HTML, JavaScript (JS), and CSS to render the HMI. A web server runs on the M2 controller and users (clients) connect to the HMI using their web browser. For security purposes, the HMI is only accessible if the client is on the same subnet as the M2 controller. Remote access from anywhere in the world could be accomplished using a VPN gateway.  </p> <p>The frontend and backend communicates through the use of a websocket, which provides a dynamic, bidirectional interface to exchange data through ROS2 topics or services.</p>"},{"location":"hmi/#getting-started","title":"Getting Started","text":"<p>This will not be a detailed tutorial and it assumes some familiarity with the ROS2 environment, Linux terminal, and web server/client basics. These are the following minimum requirements to get an M2 HMI up and running:</p> <p>Backend:</p> <ul> <li>ROS2 Humble installed on the M2 controller. This requirement should already be met if ROS2 was installed in the previous section on getting MODAQ up and running. </li> <li>rosbridge_suite. This creates the backend service to allow frontend interaction with the ROS2 environment. </li> <li>nginx web server. Web servers such as lighttp, the venerable Apache, or numerous others could be used instead of nginx. The choice of web server is mostly inconsequential as long as it supports modern web technologies and is reasonably lightweight. We will only provide guidance for configuration and use of nginx. </li> <li>At least one ROS2 node running on the M2 controller as publisher and optionally a subscriber node. </li> </ul> <p>Frontend:</p> <ul> <li>An IDE or text editor for composing the web documents. If you're using VS Code for ROS2, that will work fine.</li> <li>roslibjs. This will be installed as part of the rosbridge_suite on the backend, but needs to be 'visible' to the web server. Visibility might involve providing the correct path to the library or our preference, place of copy of the minified (alternative link) roslib in the /js folder in your nginx html document root.<sup>1</sup> </li> <li>chart.js v3.3.2<sup>2</sup> (minified). This is only required if you want to have plots in your HMI. </li> <li>chartjs-plugin-streaming (minified). and its dependencies<sup>3</sup> (which are noted in its Getting Started section of the chartjs-plugin-streaming webpage linked in the last sentence). This is only required if you intend to have plots in your HMI and want those plots to update in near realtime (AKA streaming).</li> </ul> <p>Note</p> <p>The code uses offline versions of each of these libraries, which allows the HMI to operate without needing to have an active internet connection for dynamically loading the libraries from a Content Delivery Network (CDN). Because of this, the libraries are frozen in time and may not have the latest and greatest features and will lack security updates and bugfixes. At this point, the libraries appear to be sufficiently stable and since the HMI is served on a private subnet, security should not be an issue. It should be cautioned to only use the versions of those libraries that the code was originally written for, since different versions can break stuff.</p> <p>Further, getting offline versions of JS libraries is becoming more difficult. It used to be a given that a library would have a simple and clear link to the offline version, but that is slowly changing. Since most web servers are by nature 'online', it makes sense to pull the libraries as needed from a CDN which should assure the libraries are up to date, with all recent bugfixes and security patches. This is also smart from a marketing/tracking perspective, since the developer can have a better feel for the userbase and popularity of their scripts. However, CDNs can go down, scripts can be moved to different CDNs, developers can pull/change features or alter the licensing terms, or there can be network issues causing the script not to load, so for mission critical stuff and particularly if this server does not have continuous internet access, an offline version is necessary</p>"},{"location":"hmi/#nginx-configuration","title":"nginx Configuration","text":"<p>nginx can be install with the following terminal command:</p> <pre><code>sudo apt install nginx\n</code></pre> <p>Configuration of nginx will live in these folders:</p> <pre><code>/etc/nginx/sites-available\n</code></pre> <pre><code>/etc/nginx/sites-enabled\n</code></pre> <p>The website (HMI) is hosted from the <code>/var/www/</code> folder by default. Multiple websites can be hosted simultaneously with nginx and they can be kept organized in their own folders. This discussion will assume a folder called <code>modaq_hmi</code> was created in <code>/var/www/</code></p> <p>Since the config and content folders live in root, permissions will be necessary to manipulate these files from a standard user account. Using temporary privilege escalation (<code>sudo</code>) will suffice for the nginx configuration files, but this can get tedious for the HMI content pages. Best Practices would be to edit these files in user space (i.e. a folder downstream of the user's /home folder) and include them in version control (github), then copy them to the production space (<code>/var/www/modaq_hmi</code>) when ready to take them live.</p>"},{"location":"hmi/#set-user-permissions-to-nginx-web-page-folder","title":"Set User Permissions to nginx Web Page Folder","text":"<p>While this is optional, it will make life easier during the dev process to add user permissions to thw <code>/var/www/modaq_hmi</code> folder. Otherwise, every single change will require sudo privilege escalation.  </p> <p>This sets the local user 'modaq' with rwx privileges in the modaq_hmi folder recursively:</p> <pre><code>sudo setfacl -R -m u:modaq:rwx /var/www/modaq_hmi\n</code></pre> <p>It may be necessary to do a chmod afterwards:</p> <pre><code>sudo chmod -R 755 /var/www/modaq_hmi\n</code></pre>"},{"location":"hmi/#create-nginx-virtual-server-configuration-file-for-hmi","title":"Create nginx Virtual Server Configuration File for HMI","text":"<p>As noted earlier, nginx creates two folders for the server configuration. The <code>sites-available</code> folder contains the configurations for one or more websites, while the <code>sites-enabled</code> folder contain the configuration(s) for the site(s) that nginx is currently serving. Think of <code>sites-available</code> as the parking area and <code>sites-enabled</code> as the active/production area. Instead of actually moving or copying the configuration file to the <code>sites-enabled</code> folder, nginx expects only a symbolic link to the file in the <code>sites-available</code> folder. The following shows the contents of a configuration file that works for us:</p> <pre><code>server {\n    listen 80;\n    listen [::]:80;\n\n    root /var/www;\n\n    # Add index.php to the list if you are using PHP\n    index index.html index.htm;\n\n    # For this to work, needs DNS resolution or entry in \n    # hosts files on client computer\n    server_name modaq.hmi www.modaq.hmi;\n\n    location / {\n        # First attempt to serve request as file, then\n        # as directory, then fall back to displaying a 404.\n        try_files $uri $uri/ =404;\n    } \n}\n</code></pre> <p>A couple of notes about this configuration: </p> <ol> <li>This configuration is for an unsecured connection (i.e. not https://) and is probably safe for the private subnet which serves this HMI. However, the commented section on <code>SSL configuration</code> could be enabled to provide secure connections- if certificate dependencies are met. Some web browsers might complain about connecting to the HMI citing that the connection is unsecure and potentially dangerous if SSL is not enabled. It may be necessary to click through some warnings or whitelist the site. </li> <li>The entry for <code>server_name</code> was an attempt allow users to type modaq.hmi into their browser instead of having to know the IP address of the controller. While that would be convenient, more work needs to be done to get it working, so we backburnered this for other priorities. </li> </ol>"},{"location":"hmi/#ubuntu-firewall-rules","title":"Ubuntu Firewall Rules","text":"<p>If the Ubuntu firewall (<code>ufw</code>) is enabled on the controller, it may be necessary to create a firewall rule to allow nginx to access the network. This is done with a simple terminal command:</p> <pre><code>sudo ufw allow 'Nginx HTTP'\n</code></pre>"},{"location":"hmi/#rosbridge-server","title":"ROSBridge Server","text":"<p>The primary mechanism providing connectivity between ROS2 nodes running on M2 and the nginx web server is a websocket that is managed through rosbridge and roslibjs. Rosbridge is the service running along with M2 ROS2 nodes and exposes all published topics to a websocket.</p> <p>If the rosbridge_suite was properly installed, the rosbridge server can be started with this command:</p> <p><code>ros2 run rosbridge_server rosbridge_websocket</code></p> <p>It's recommended to add this as the last item in the M2 launch file so that it starts automatically with the rest of the ROS2 nodes.</p> <pre><code>Node(\n    package='rosbridge_server',\n    executable='rosbridge_websocket',\n    name='rosbridge'\n)\n</code></pre>"},{"location":"hmi/#web-client-framework","title":"Web Client Framework","text":"<p>There are four main parts of the web code that are necessary for pub/sub with ROS2 on the M2 system</p> <ol> <li>Establish the websocket connection to ROSBridge </li> <li>Create a listener for ROS2 topics (subscribe) and/or define a topic to publish</li> <li>Handle incoming/outgoing messages</li> <li>Create the user interface (actual webpage)</li> </ol>"},{"location":"hmi/#basic-hmi-design-elements","title":"Basic HMI Design Elements","text":"<p>The M2 HMI uses a simple but effective grid of tiles to organize the content. This is accomplished through a hierarchy of <code>&lt;div&gt;</code> tags to define the sections (or divisions) with attributes applied from CSS classes. </p> <p>In this public release, these basic features are included in the HMI:</p> <ol> <li>Traffic Lights - These are multi-modal text boxes that can change color based on logic contained in the accompanying JS. The traffic lights can be used to indicate whether a parameter is nearing or exceeding defined thresholds or indicate an alarm condition.</li> <li>Scalar Data -  Display the current numeric value of certain parameters from a subscribed topic.</li> <li>Streaming Plots - The examples include single and multivariate plots, as well as dual y-axis plots. </li> <li>Boolean Tick Boxes - These allow publishing boolean values back to M2 that can be used for manual control or setting the state of certain features. </li> <li>Text/Numeric Entry Boxes - These can publish numeric or text values to M2.</li> </ol> <p>Since everything is written in ordinary HTML/JS/CSS and a handful of publicly available JS libraries, users can easily leverage these examples to develop a customized HMI suitable for their application. </p> <p>The tile system (aka grid) is quite flexible, allowing one to many content tiles on each row. While the height of each row can be constrained, the example included in this repo allows the height to grow to fill the content. The width of each tile is constrained to a fraction of the overall width allowed by the top-level (parent) div container. </p> <p>Diving deeper, the parent div is configured with 4 available columns in the included <code>style.css</code> file and looking at the screen shot of the HMI page at the beginning of this section, the MODAQ banner is allowed to span 3 columns in width, while the rosbridge status tile is set to 1 column- for a grand total of 4 columns. </p>"},{"location":"hmi/#roslib-subscriber","title":"roslib Subscriber","text":"<p>roslib.js is a javascript library used on the webserver that can subscribe to topics published on M2 and display the data in a webpage. In addition it allows for publication of topics from the webpage as well as using or creating services.</p> <p>First, an object is created to establish the websocket connection to the ROS2 instance on the M2 controller (showing the most relevant code snippet):</p> <p><code>const ros = new ROSLIB.Ros({ url: \"ws://localhost:9090\" });</code><sup>4</sup></p> <p>Next, a listener object is created to subscribe to the desired topic being published on the controller. In this example we have a temperature and humidity sensor that is acquired in M2 using MODBUS TCP and the scaled data are published to the <code>ths</code> topic. </p> <pre><code>// MODBUS Temperature and Humidity Sensor\nvar ths_listener = new ROSLIB.Topic({\n    ros: ros,\n    name: '/ths',\n    messageType: 'ths_modbus/msg/Th',\n    throttle_rate: 1000 // throttle_rate sets update interval in ms\n});\n</code></pre> <p>When a new message is received, it's copied to a variable with global scope for further manipulation within the curly braces. </p> <pre><code>ths_listener.subscribe(function (message) {\n    // copy ROS data to var with global scope\n    ths_data = message;\n    // do stuff here with the topic data\n});\n</code></pre>"},{"location":"hmi/#roslib-publisher","title":"roslib Publisher","text":"<p>The roslib publisher follows a similar pattern to the Subcriber, first a topic object is created:</p> <p><pre><code>var hmiCtl = new ROSLIB.Topic({\n    ros: ros,\n    name: '/hmi_ctl',\n    messageType: 'modaq_messages/msg/Hmi'\n});\n</code></pre> We had previously created a unique message schema for the HMI in ROS2 on the M2 controller and included it during the build process, which includes the parameters we want to publish from the HMI.  </p> <p>An event listener is bound to the \"Push to MODAQ\" button in the HMI, triggering a read of the user controls... </p> <pre><code>var hmiPub = new ROSLIB.Message({\n    override: user_override,\n    do0: user_do0,\n    do1: user_do1,\n    do2: user_do2,\n    do3: user_do3,\n    int1: user_int1,\n    message1: 'Hello Casey',\n    message2: 'Hello Aidan',\n    float2: 3.17,\n    header: {\n        frame_id: '1'\n    }\n}\n</code></pre> <p>and publishes them. <pre><code>hmiCtl.publish(hmiPub);\n</code></pre></p>"},{"location":"hmi/#traffic-lights","title":"Traffic Lights","text":"<p>The appearance of the traffic lights is done with CSS and the color change is triggered by some JS logic. </p> <p><pre><code>if (ths_data.humidity &gt; 90) {\n        document.getElementById(\"status1\").innerHTML = \"&lt;span class='traffic_light false'&gt;Humidity&lt;/span&gt;\";\n    } else if (ths_data.humidity &gt; 65) {\n        document.getElementById(\"status1\").innerHTML = \"&lt;span class='traffic_light warn'&gt;Humidity&lt;/span&gt;\";\n    } else {\n        document.getElementById(\"status1\").innerHTML = \"&lt;span class='traffic_light true'&gt;Humidity&lt;/span&gt;\";\n    }\n</code></pre> In this snippet, if the humidity is &gt;90, the traffic light identified by the tag <code>status1</code> is styled using a combination of two CSS classes: <code>traffic_light false</code>, which in this case will color it red. Similarly, if it's &gt;65, it's colored yellow, otherwise it's green. </p>"},{"location":"hmi/#streaming-charts","title":"Streaming Charts","text":"<p>We chose chart.js as the charting engine for the M2 HMI, since it's highly customizable, capable, and looks good. It also has great support (both from the developer and user community), which is important, since it can be a little complicated to use. Because of this complexity, this section will not go into detail on its use, but will point out a few details around getting the streaming to work correctly - particularly with multivariate/dual-axis plots. </p> <p>chart.js, without the <code>chartjs-plugin-streaming</code> plugin, expects to be passed a static numeric array and it renders into a plot with the selected attributes. The streaming plugin (basically) creates a fifo buffer for the data points and animates them on the x-axis.</p> <p>Tip</p> <p>limit the chart history in order to assure smooth operation- especially with multiple charts on a single HMI page.</p> <p>The architecture of the HMI web stack purposely places the computational burden of chart composition and rendering on the web client (i.e. your browser) not the M2 controller. Therefore, low-powered computers may struggle with smooth animation if the HMI has a lot of plots and/or the chart history is too big. The example included in this repo updates the chart at 1 Hz and displays up to 1 minute of data history. The update rate and history depth can be adjusted to preference.</p> <p>chart.js breaks up the chart composition into 3 blocks: setup, config, and render. The setup block defines the y-axis datasets, labels, and plot trace attributes. The config block expands on this by defining additional attributes and binding the dataset(s) to an object that gets rendered in the render block. This all expects the data to formatted as an array, however our data are constructed into objects. </p> <p>To overcome this, we define a object literal to map the y-axis label(s) to the label used to identify the desired element in the data object (example for the accelerometer data). </p> <p><pre><code>const dataMap = { Ax: 'ax', Ay: 'ay', Az: 'az' };\n</code></pre> Then we insert each data point into the chart object:</p> <pre><code>chart.data.datasets.forEach(dataset =&gt; {\n    dataset.data.push({\n        x: Date.now(),\n        y: mpu6050_data[dataMap[dataset.label]],\n    });\n});\n</code></pre> <p>Side Note - We typically use high quality inertial sensors in our projects and eagle-eyed readers will notice the MPU-6050 referenced in a few places in this documentation and the github repo. The MPU-6050 is a &lt;$5 sensor that has some utility in the occasional low-cost/low demand applications (see: MODAQ-BB). </p> <p>Similarly, handling a multivariate data object and plotting with dual y-axes took some creativity, but is simpler as long as only 2 parameters are plotted:</p> <pre><code>chart.data.datasets.forEach(dataset =&gt; {\n    dataset.data.push({\n        x: Date.now(),\n        y: dataset.label === 'Temperature' ? ths_data.temperature : ths_data.humidity\n    });\n});\n</code></pre> <ol> <li> <p>Using the minified version of any of the required JS libraries is totally optional. We prefer minified, since it's a smaller overall payload and can improve performance. The disadvantage to using minified libraries is that all unnecessary whitespace characters are removed, so inspecting or edited the library code can be very difficult- even though it's still in plain text.\u00a0\u21a9</p> </li> <li> <p>We're using chartjs v3.3.2 since at the time we were creating the HMI there were compatibility issues with the plugin-streaming library on v4 and higher. That may have been resolved in later releases of plugin-streaming.\u00a0\u21a9</p> </li> <li> <p>Since finding the dependencies as minified libraries in the correct version can be a bit of a pain, here are direct links: luxon v3.4.40 and chartjs-adapter-luxon v1.0.0 \u21a9 <li> <p>Replace 'localhost' with the IP address of the M2 controller hosting the HMI webpage.\u00a0\u21a9</p> </li>"},{"location":"links/","title":"Useful Links","text":""},{"location":"links/#m2-useful-links","title":"M2 Useful Links","text":"<p>Note</p> <p>When exploring learning material for ROS2, be wary to avoid training on ROS1 as it is quite different from ROS2. Try to stick to training specific toward ROS2 Humble Hawksbill.</p>"},{"location":"links/#modaq","title":"MODAQ","text":"<p>M2 Repo: github.com/NREL/MODAQ2</p> <p>NREL: nrel.gov/water/open-water-testing.html</p>"},{"location":"links/#ros2","title":"ROS2","text":"<p>Design Reference: design.ros2.org</p> <p>Humble Documentation: docs.ros.org - See the Tutorials section for helpful ROS2 examples </p> <p>Control Documentation: control.ros.org/humble/</p> <p>Tutorials:</p> <ul> <li>roboticsbackend.com/category/ros2/ <li>app.theconstruct.ai/courses/ros2-basics-in-5-days-humble-c-133/ <p>Note: this course is robotics centric, but the principles discussed are relevent for MODAQ2 development</p>"},{"location":"links/#ubuntu","title":"Ubuntu","text":"<p>Installing Ubuntu 22.04: ubuntu.com/tutorials/install-ubuntu-desktop</p> <p>Foxglove GUI software: docs.foxglove.dev/docs/introduction</p>"},{"location":"links/#c","title":"C++","text":"<p>Reference: en.cppreference.com/w/cpp</p> <p>Tutorials:</p> <ul> <li>thenewboston Youtube channel: youtube.com/playlist?list=PLAE85DE8440AA6B83 </li> <li>C++ for robotics course: app.theconstruct.ai/courses/c-for-robotics-59/</li> </ul>"},{"location":"links/#git-and-github","title":"Git and Github","text":"<ul> <li>Managing personal access tokens: managing-your-personal-access-tokens</li> <li>Forking a github repo: fork-a-repo</li> <li>Using git submodules for modularity in versioning: working-with-submodules</li> <li>Creating a pull request with a forked repo: creating-a-pull-request-from-a-fork</li> </ul>"},{"location":"roadmap/","title":"Roadmap","text":""},{"location":"roadmap/#m2-roadmap","title":"M2 Roadmap","text":"<p>This is test to see how this renders in dark mode</p> <p></p>"},{"location":"software/","title":"Software","text":""},{"location":"software/#m2-software","title":"M2 Software","text":"<p>This section will discuss the software architecture of the M2 and explain the reference design available on the NREL GitHub at MODAQ2. For discussion on design decisions and details on technical aspects of the software design, please see the Technical Reference page.</p>"},{"location":"software/#introduction","title":"Introduction","text":"<p>M2 has been designed around the ROS2 ecosystem of libraries and tools to provide users a well established way of developing a data acquisition system. ROS2 was selected because it is easy to learn with many free online training resources, completely free and open-source, supports multiple programming languages, and is reliable for long term use in industrial settings. There is also a plethora of already existing ROS packages that users can leverage in addition to the packages developed in the MODAQ 2 project.</p> <p>The MODAQ 2 project is the amalgamation of ROS packages, tools, and guidance for developing data acquisition and control applications for marine energy devices using a ROS based architecture. The MODAQ 2 Reference Design includes several packages that are targeted for the marine energy sector and allow most developers with a basic background in programming to spin up a high-quality DAQ and control system.</p> <p>The main software aspects of MODAQ 2 are as follows:</p> <ul> <li>Ubuntu Linux Operating System</li> <li>RO2 Humble Hawksbill</li> <li>Externally Developed ROS Packages</li> <li>MODAQ 2 Custom and Internally Developed ROS Packages</li> <li>Third Party DAQ Driver libraries</li> </ul> <p>Note</p> <p>It may be possible to run MODAQ 2 on newer versions of Ubuntu and ROS2 but they are not currently tested and supported.</p>"},{"location":"software/#ubuntu-2204-lts","title":"Ubuntu 22.04 LTS","text":"<p>Because ROS2 Humble was selected as the ROS ecosystem, it is highly recommended that users work in the Ubuntu 22.04 operating system. Ubuntu is a free to use (for most applications) Linux distribution and has the best support for the ROS ecosystem. To get started working in Ubuntu, it is recommended to visit the Hardware page of this document to ensure that your controller meets the requirements of the MODAQ 2 design. After that, you can follow the instructions provided in Useful Links to install Ubuntu 22.04 Desktop on your controller.</p>"},{"location":"software/#ros2-humble-hawksbill","title":"ROS2 Humble Hawksbill","text":"<p>The Robotic Operating System (ROS) is a collection of middleware, libraries and tools that were designed to benefit the robotics development community. The qualities of ROS that benefit the robotics community also benefit the data acquisition and control for marine energy community. It provides an easy entry point for software development for data acquisition control but it also is very scalable and has the capabilities to do very advanced computational tasks if needed for a project. For example, after installing the ros-humble-desktop and MODAQ 2 packages, you can quickly run a process that collects and logs sensor data in mcap bag files for data analysis. However, if you need to build code that is deterministic or real-time, this is also possible with ROS but requires a much lower level understanding of computer programming and is likely not necessary for many applications. In summary, ROS is adaptable and extensible to meet the requirements of a data acquisition and control project.</p> <p>The fundamentals of ROS are covered extensively in many online trainings, videos, whitepapers and classes, and we have collected our recommended starting places in the Useful Links page.</p> <p>For MODAQ 2 usage, the main concepts to understand are as follows:</p> <ul> <li>Nodes: the software processes that make up a ROS system</li> <li>Packages: collections of nodes usually including all the necessary nodes to use a system component</li> <li>Topics, Messages, Publishers and Subscribers: how ROS nodes communicate with each other</li> <li>Middleware DDS: the background system that allows nodes to communicate reliably and with modularity</li> <li>Command Line Tools: useful tools to test and debug ROS systems</li> <li>Build System: colcon is used to build ROS2 packages</li> <li>Launch Files: files that define the startup and execution of a complete ROS system</li> <li>Parameters: configuration items that can modify how the ROS system operates</li> <li>Bag (mcap) files: data files that database the information collected and communicated through ROS</li> </ul>"},{"location":"software/#requirements","title":"Requirements","text":"<p>The hardware requirements should be met before continuing with setting up the software requirements.</p> <p><pre><code>## Please follow the provided instructions for installing ROS2 but you can verify the install with this command:\nsudo apt update\nsudo apt upgrade\nsudo apt install ros-humble-desktop ros-dev-tools ros-humble-rosbag2 ros-humble-rosbag2-storage-mcap nginx git curl linuxptp ros-humble-rosbridge-suite\n</code></pre> This command will verify the proper installation of the main components of ROS on your Ubuntu 22.04 controller. This doesn't include the Labjack LJM Library which is required for using the Labjack T8 device. Instructions for installing this are described below.</p>"},{"location":"software/#cloning-the-repo","title":"Cloning the Repo","text":"<p>Follow the instructions described in M2 Github.</p>"},{"location":"software/#m2-launch","title":"M2 Launch","text":"<p>The m2_launch package includes the python launch file which starts all the parallel processes (nodes) of the MODAQ 2 system. In m2_launch.py, the nodes of the system are specified and the config file is supplied. All ROS parameters of a node should be specified in the config file.</p> <p>Note</p> <p>The name of the node specified in the launch file must match the name of the node in the yaml config file. I.e. M2Supervisor in the launch file and the config yaml file.</p>"},{"location":"software/#example-launch-and-config-files","title":"Example launch and config files:","text":"<p><pre><code>import yaml\nimport os\nfrom launch import LaunchDescription\nfrom launch_ros.actions import  Node\nfrom launch_ros.actions.node import ExecuteProcess\nfrom datetime import datetime\nfrom ament_index_python.packages import get_package_share_directory\n\n#### PATH TO MODAQ CONFIG FILE ######\n## FYI THIS PULLS THE FILE FROM THE INSTALL DIRECTORY, NOT THE SRC DIRECTORY\nconfig = os.path.join(\n      get_package_share_directory('m2_launch'),\n      'config',\n      'm2_config.yaml'\n      )\n\ndef generate_launch_description():\n\n  return LaunchDescription([\n    Node(\n    package    = \"m2_supervisor\",\n    executable = \"m2_supervisor_node\",\n    name = \"M2Supervisor\",\n    parameters = [config],\n    output=\"screen\",\n    respawn = True\n    ),\n    Node(...other nodes)\n  )]\n</code></pre> <pre><code>M2Supervisor:\n  ros__parameters:\n    loggerPath: \"/home/m2/Log\"\n    loggerLimitBytes: 1000000\n    emailSendAddr: \"youremailwithsmtpenabled@email.com\"\n    emailSendPwd: \"passwordhere\"\n    emailGroup1:\n      - \"youremail@email.com\"      \n    emailGroup2:\n      - \"youremail2@email.com\"\n    analyzedTopics:\n      - /ain_flap\n      - /T8din\n    topicErrorEmailSnooze: 60\n</code></pre></p> <p>The launch file and config files are moved once the build process is completed. To access these files, you must run <code>source install/setup.bash</code> in terminal. You should then be able to launch the file with the command <code>ros2 launch m2_launch m2_launch.py</code>. Executing this will start all the ROS nodes together. If this fails, errors will be reported in the terminal to assist you with troubleshooting.</p>"},{"location":"software/#mcap-bag-data-files","title":"MCAP Bag Data Files","text":"<p>The data collected by different nodes within MODAQ 2 is published on specific topics. This enables the data to be recorded and saved for future use. This is implemented by using the ROS2 bag recorder node and the mcap storage method. The ROS2 bag package can be installed by running <code>sudo apt install ros-humble-rosbag2 ros-humble-rosbag2-storage-mcap</code> in terminal. This is a useful tool for debugging robotic applications however, it is designed with enough reliability to function as a robust data recorder for data acquisition applications. The bag_recorded package in the MODAQ 2 reference design takes the rosbag2 API and adds some flexibility to it to allow for recording only specified topics as well as the ability to start and stop the recording programmatically.</p>"},{"location":"software/#configuration","title":"Configuration","text":"<p>The bag_recorder_node is configured in the launch file configuration yaml file and includes the folder in which to save the bag files (mcap files). It includes the length of the files in seconds. It is best to break up the mcap files so they don't become too large and to reduce to possibility of corruption if the system crashes or power is lost. It also includes the logged topics. All topics in this list will be included in the bag files. You can also enable recording all topics by specifying \"*\" as the logged topics.</p> <pre><code>BagRecorder:\n  ros__parameters:\n    dataFolder: \"/home/m2/Data\"\n    fileDuration: 60\n    loggedTopics:\n      - /system_messenger\n      - /ain\n      - /do\n      - /T8din\n</code></pre>"},{"location":"software/#parsing-mcap-files","title":"Parsing mcap files","text":"<p>The mcap file format was designed by Foxglove  and they also developed a GUI software that is able to process these data files and output plots, tables and other useful visualizers. For information on this GUI viewer, please see Useful Links.</p> <p>To analyze the data, we recommend using the rosbags python package which is also able to parse the mcap files and generate numpy arrays which can be used for data analysis. This can be install with pip: <code>pip install rosbags</code></p> <p>Example Python code for parsing mcap files: <pre><code>from rosbags.rosbag2 import Reader\nfrom rosbags.serde import deserialize_cdr\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom pathlib import Path\nfrom rosbags.typesys import Stores, get_types_from_msg, get_typestore\n\nimport os\n\ndef get_all_file_names(folder_path):\n    try:\n        # List all files in the given folder\n        file_names = os.listdir(folder_path)\n        # Filter out directories, only keep files and return their full paths\n        file_paths = [os.path.join(folder_path, file) for file in file_names if os.path.isfile(os.path.join(folder_path, file))]\n\n        # Generate the modaq_messages/msg/{FILE_NAME} strings\n        modaq_messages = [f\"modaq_messages/msg/{os.path.splitext(file)[0]}\" for file in file_names if os.path.isfile(os.path.join(folder_path, file))]        \n        return file_paths, modaq_messages\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return [], []\n\n\n# Example usage\nfolder_path = r\"C:\\MODAQ\\MODAQ2-RD-Dev\\src\\modaq_messages\\msg\"\nfile_names, message_types = get_all_file_names(folder_path)\nprint(file_names, message_types)\ntypestore = get_typestore(Stores.ROS2_HUMBLE)\nadd_types = {}\n\nfor i, name in enumerate(file_names):\n    print(\"name: \", name)\n    msgpath = Path(name)\n    msgdef = msgpath.read_text(encoding='utf-8')\n    print(msgdef)\n    add_types.update(get_types_from_msg(msgdef, message_types[i]))\n\ntypestore.register(add_types)\n# create reader instance and open for reading\nlast_time = 0\nlast_timer = 0\ndt_ros = []\ndt = []\n\nwith Reader(r\"./\") as reader:\n    # Topic and msgtype information is available on .connections list.\n    for connection in reader.connections:\n        print(connection.topic, connection.msgtype)\n\n    # Iterate over messages.\n\n    for connection, timestamp, rawdata in reader.messages():\n        if connection.topic == '/ain_flap':\n            msg = typestore.deserialize_cdr(rawdata, connection.msgtype)\n            time = (msg.header.stamp.sec + (msg.header.stamp.nanosec/1e9))\n\n            dt_ros.append(time-last_time)\n            last_time = time\n\n\n\nplt.plot(np.array(dt_ros)[100::])\nplt.show()\n</code></pre></p>"},{"location":"software/#modaq-messages","title":"MODAQ Messages","text":"<p>modaq_messages are custom messages that are used in MODAQ 2. ROS includes many message types by default but it was deemed necessary to build our own custom message types more applicable to our application of data acquisition. This ROS package has no nodes in it but it includes the CMake commands to turn the msg files into headers which can be referenced in different nodes. For example, /system_messenger uses modaq_messages/msg/systemmsg.hpp to define the type in different nodes. To use these custom messages, they must be included in the package.xml and the CMakeLists.txt file.</p> <p>CMakeLists.txt: <pre><code>find_packages(modaq_messages REQUIRED)\nament_target_dependencies(m2_supervisor_node rclcpp std_msgs modaq_messages rosbag2_cpp)\n</code></pre> package.xml: <pre><code>&lt;depend&gt;modaq_messages&lt;/depends&gt;\n</code></pre></p>"},{"location":"software/#m2-supervisor","title":"M2 Supervisor","text":"<p>The m2_supervisor is a package that was put in place to serve as the central process of MODAQ that enables some features that are very valuable to the marine energy industry. It includes features for logging events, sending emails and monitoring the health of the bag files being recorded.</p>"},{"location":"software/#logger","title":"Logger","text":"<p>The logger processes /system_messenger messages that have the log switch turned on and stores the information into a human-readable text file for diagnostics during operations.</p>"},{"location":"software/#emailer","title":"Emailer","text":"<p>The emailer processes /system_messenger messages that have the email switch turned on and sends and email with smtp which contains the important information in a human readable format. For this to work, you must have an email with smtp enabled - this is possible with a free gmail account.</p>"},{"location":"software/#baganalyzer","title":"BagAnalyzer","text":"<p>Coming soon! This feature is still under development. The goal is to develop a process that monitors bag recording to ensure that all topics are being recorded as expected.</p>"},{"location":"software/#labjack-t8-ros-package","title":"Labjack T8 ROS Package","text":"<p>The labjack_t8_ros2 package was developed specifically for use in MODAQ 2. This packages relies on a third party driver to interface with the Labjack T8.</p>"},{"location":"software/#labjack-ljm-library","title":"Labjack LJM Library","text":"<p>MODAQ 2 Reference Design includes the Labjack T8 to make high-speed measurements up to 40 kHz. We have provided the labjack_t8_ros2 package to connected to T8 devices and stream data to ROS so it can be acted upon with control rules and/or logged for post-processing and analysis. To use the labjack_t8_ros2 package, the Labjack LJM library needs to be installed on your controller.</p> <p>The instructions for installing this library are in {MODAQ 2 Repo}/src/labjack_t8_ros2/README.md</p>"},{"location":"software/#m2-control","title":"M2 Control","text":"<p>Currently the m2_control package just handles the interactions between the system and the HMI. The ROS2 ecosystem is well suited for more advanced control operations. A simple control alorithm could be implemented by creating a subsriber for the control rule input (i.e. the measurement of a battery voltage) with a callback class function. In the callback function, you could implement your algorithm (i.e. if voltage is too low, turn off a pump). The control could be actuated by then publishing a command to a digital output to turn something on or off (i.e. turning off the pump).</p> <p>ROS2 also has built in control algorithms that you may find useful despite their main focus being on robot control. See the package ros2_control to learn about the advanced control options developed for use in ROS2.</p>"},{"location":"software/#human-machine-interface","title":"Human-machine Interface","text":"<p>The HMI is described on the HMI page</p>"},{"location":"software/#headless-operation","title":"Headless Operation","text":"<p>MODAQ 2 will often need to run headless or automatically start on the boot of the controller. This can be done with linux services.</p> <p>Instructions for putting this in place can be found in {MODAQ 2 Repo}/service/README.md</p>"},{"location":"software/#doxygen","title":"Doxygen","text":"<p>The development of c++ documentation has started and is a work in progress. To view the c++ documentation made using doxygen, navigate to the docs folder and build using the bash command <code>doxygen</code>. More information is available in docs/README.md. Once built, the doxygen documentation can be viewed on the nginx webserver by opening {M2_Controller_IP}/index.html</p>"},{"location":"software/#precision-time-protocol","title":"Precision Time Protocol","text":"<p>The precision time protocol or IEEE1588v2 or PTPv2 is a protocol used for synchronizing clocks on a network. While this can be done at the software level on the linux kernel, it is recommended to use a hardware implementation for synchronization in the microseconds. To do this, the network interface card (NIC) of your controller must officially support PTP. This can be determined with the model number of the NIC which can be determined with the command <code>lspci | grep Ethernet</code> which returns: <pre><code>01:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03)\n03:00.0 Ethernet controller: Intel Corporation Ethernet Controller (2) I225-IT (rev 03)\n</code></pre> Both of these Intel ethernet NICs (I210 and I225) support PTP. We recommend purchasing controllers with Intel NICs as they have the highest reliability when using PTP.</p> <p>The linux support for PTP can be installed using <code>sudo apt install linuxptp</code>. This enables the ptp4l tool which allows user interaction with the PTP hardware clocks on your controller's NIC.</p>"},{"location":"techref/","title":"Technical Reference","text":""},{"location":"techref/#m2-technical-reference","title":"M2 Technical Reference","text":""},{"location":"techref/#ros2-nodes","title":"ROS2 Nodes","text":"<p>The M2 Reference Design includes the following nodes. Click on the item to expand its description.</p> Node: m2_supervisor_node This node manages a number of MODAQ's core functionality, which include system logger, email alerts, and rate limiter (snoozer)  Package: m2_supervisor Alias: M2Supervisor Configuration Parameters: log file path, log file size limit, SMTP settings, distribution email lists (2x), analyzed topics, email snooze interval Publishers: /system_messenger Subscriptions: /system_messenger Node: bag_recorder_node Node description Package: bag_recorder Alias: N/A Configuration Parameters: IP address Publishers: /system_messenger Subscriptions: /system_messenger, /ain, /do, /din, /rtd, /bag_control Node: labjack_ain_reader Reads up to 8 AI channels simultaneously from a single Labjack T8. This node uses a configurable timer to fetch (poll) channel reads from the T8. Package: labjack_t8_ros2 Alias: LabjackAINSlow Configuration Parameters: IP address, sample rate, topic name Publishers: /system_messenger, /ain_slow Subscriptions: none Node: labjack_ain_streamer Streams up to 8 AI channels from a single Labjack T8. This node sets the T8 to stream data continuously at rates up to 40 kHz. Channel reads are simultaneous. To better manage network resources for high speed streams, data transfers are batched by the ScansPerRead parameter. Package: labjack_t8_ros22 Alias: LabjackAINFast Configuration Parameters: IP address, sample rate, scans per read, topic name Publishers: /system_messenger, /ain_fast Subscriptions: none Node: labjack_dac_writer Controls one or more analog outputs on the T8. Output voltage can be adjusted between 0-10 VDC or \u00b110v with the LJTick-DAC Package: labjack_t8_ros2 Alias: LabjackDAC Configuration Parameters: IP address, channel selection, topic name Publishers: /system_messenger Subscriptions: /LJ_Ctl_Pub Node: labjack_do_node Switches one or more digital output (logic level) channels on the T8 high or low. Package: labjack_t8_ros2 Alias: LabjackDO Configuration Parameters: IP address, topic name Publishers: /system_messenger Subscriptions: /do Node: labjack_dio_reader Reads the logic state of one or more DIO channels. Package: labjack_t8_ros2 Alias: LabjackDIN Configuration Parameters: IP address, topic name Publishers: /system_messenger, /din Subscriptions: none Node: adnav_driver Manages configuration and initialization of the Advanced Navigation GNSS Compass and publishes its data. Package: adnav_gnss_compass Alias: AdnavCompass Configuration Parameters: too many to list here Publishers: /system_messenger, /nav Subscriptions: none Node: xsens_mti_node Manages configuration and initialization of the Xsens MTi-G-710 and publishes its data. This is a 3rd party package cloned from here.  This can work with other Xsens inertial sensors too. Package: bluespace_ai_xsens_ros_mti_driver Alias: XsensINS Configuration Parameters: too many to list here Publishers: /system_messenger, /imu/acceleration Subscriptions: none Node: ed582_driver Reads up to four channels of RTD temperature measurements from a Brainbox ED-582. This is adapted from a 3rd party API available here. Package: ed582 Alias: RTDed582 Configuration Parameters: IP address, sample rate, topic name Publishers: /system_messenger, /rtd Subscriptions: none Node: m2_control This node can read directives published by the HMI and/or incorporate control logic and publish actions for digital or analog output channels. Package: m2_control Alias: M2Control Configuration Parameters: IP address, sample rate, topic name Publishers: /system_messenger, /dac, /do Subscriptions: /hmi_ctl Node: rosbridge_websocket This node creates a bridge between ROS2 and a websocket that is used to subscribe to and publish topics from a webpage using roslibjs. This is a lightly modified version of rosbridge_server from the rosbridge_suite github repo. Package: rosbridge_server_m2 Alias: Rosbridge Configuration Parameters: none Publishers: /hmi_ctl Subscriptions: /din, /ain_slow, /rtd"},{"location":"techref/#real-time","title":"Real-Time","text":"<p>A real-time system is one that assures certain deadlines are met reliably within expected time constraints. See this Wikipedia article for a more complete definition.  </p> <p>Recommended Reading</p> <p>This series of blog posts by Shuhao Wu is an excellent, easy to read distillation of numerous resources on real-time computing. This is highly recommended reading to provide context to some of the topics that will be discussed in this section.</p> <p>Using a real-time architecture and approach in MODAQ allows better management of sources of latency and reduction of jitter. What this means in practical terms is that certain time-critical loops, processes, or functions can execute deterministically and that variation in timing of successive iterations is kept low.  </p>"},{"location":"techref/#latency","title":"Latency","text":"<p>Opening Task Manager in Windows or the equivalent in in other operating systems (OS), there may be hundreds of processes listed that are all vying for a slice of the CPU's time. These include things like device drivers, software updaters, user software, malware detectors, and lots of other things that comprise the modern computing experience. With fast, multi-core processors, these appear to be seamlessly juggled, usually with little delay apparent to the user. This is all managed by the scheduler and it tries to be fair as it doles out access to a CPU core. Under critical analysis, an application may have to wait a non-deterministic amount of time for that CPU attention- and that wait time might vary considerably for each request. This variation may be only a few milliseconds (or longer) but for DAQs running loops hundreds or several thousand times per second, that's an eternity. </p> <p>A properly configured real-time stack offers the software developer some tools to better manage how the real-time code gets its CPU time by preempting lower priority processes (jumping to the head of the line). The end effect is that the real-time code should experience less of this source of latency.</p> <p>Info</p> <p>Determinism <p> A deterministic real-time system should complete a task within a bound time period in a consistent and repeatable manner. </p> <p>Different real-time approaches yield better or worse maximum latency periods. Specific project requirements or use-cases often dictate the maximum acceptable latency for a particular application. This is most common for safety-critical systems, such as an anti-lock brake controller, where missing a deadline can result in disaster. These will often be associated with terms such as \"guaranteed\" or \"hard\" real-time. From a system architecture and software development standpoint, achieving this level of latency and determinism is difficult and probably not practical nor even necessary for a DAQ such as M2. </p> <p>However, in the space between extremely low latency, safety-critical, real-time systems and general purpose operating systems without real-time support, there is Real-Time Linux. Or, more correctly, the PREEMPT_RT patch for Linux kernels.   </p>"},{"location":"techref/#real-time-linux","title":"Real-Time Linux","text":"<p>Linux with the PREEMPT_RT patch has been successfully used in various industries such as automotive, space, and industrial automation for years and by organizations including National Instruments, NASA, and SpaceX.<sup>1</sup><sup>2</sup> This lends confidence that it's appropriate for M2 applications.</p> <p>At the time of writing, it appears that the mainline Linux kernel is expected to gain real-time support<sup>3</sup> in a coming release. Until that happens, it's necessary to manually compile the kernel with the PREEMPT_RT patch or find a distribution for an already patched RT kernel.   </p>"},{"location":"techref/#validating-rt-performance","title":"Validating RT Performance","text":"<p>Once patched kernel has been installed and the necessary changes to BIOS have been made, it's necessary to conduct some tests on the system to validate the 'as-built' latency performance. </p> <p>A very useful tool for this is provided by intel: RTPM. This tool will evaluate the settings on your computer to ensure they are optimized for real-time performance. It also will conduct several tests that will characterize your real-time performance.</p>"},{"location":"techref/#precision-time-protocol","title":"Precision Time Protocol","text":"<p>The promise of PTP is that all connected PTP-aware devices will be synchronized and reference-time accurate to 100's, if not 10's of nanoseconds- without drift. By comparison, Network Time Protocol (NTP), which is what most consumer computers and laptops use as a time reference, can at best achieve 10's of milliseconds accuracy. While NTP accuracy might be perfectly acceptable to some and often better than a real time clock (which can drift several seconds a day), it's a ~6 order of magnitude difference in accuracy as compared to PTP. If a quality time reference is not available, samples taken from input modules on the same DAQ controller will be disciplined by the same clock and will likely be precisely timestamped relative each other, but may not be accurate to actual time (i.e. UTC) . </p> <p>Where the real power of PTP is realized is in synchronizing samples taken by disparate systems. These can be DAQs on the same subnet, sharing the same master clock or systems completely disconnected from each other and separated miles apart. As long as each system is disciplined to a healthy PTP reference clock, the samples will be synchronized to the aforementioned nanosecond time precision. This is a boon for distributed architectures and system design flexibility, allowing multi-controller synchronization without physical interconnections. </p> <p>In our experience, PTP implementation either works magically or is a real bear. It does help to have some knowledge of networking and configuring managed switches. PTP requires the following for optimal performance:</p> <ol> <li>PTP time server</li> <li>PTP-capable endpoints (e.g. M2 controller, ethernet based devices)</li> <li>PTP services configured and running on the endpoints</li> <li>PTP-capable network switch</li> </ol> <p>These items need to be properly configured, otherwise the PTP performance may be degraded or non-existent. </p>"},{"location":"techref/#adcs","title":"ADCs","text":"<p>Coming soon...</p>"},{"location":"techref/#4-20-ma-current-loops","title":"4-20 mA Current Loops","text":"<p>Coming soon...</p>"},{"location":"techref/#heading","title":"Heading","text":"<p>Getting a reliable estimate of heading on a fixed or semi-stationary device can be tricky. Devices that rely on Earth's magnetic field need to be calibrated in-situ and have the proper magnetic declination correction applied. </p> <p>Since a calibration procedure generally requires rotating the sensor 360\u00b0 in one or more axis, this is often difficult or near impossible once the sensor is mounted on the device (WEC, buoy, etc). It's easier to calibrate the compass prior to installation, however this is not effective, since the magnetic field will most likely be distorted by the presence of hard and soft iron sources near the mounting location. </p> <ol> <li> <p>https://www.linux.com/news/in-the-trenches-with-thomas-gleixner-real-time-linux-kernel-patch-set/\u00a0\u21a9</p> </li> <li> <p>https://ntrs.nasa.gov/api/citations/20200002390/downloads/20200002390.pdf\u00a0\u21a9</p> </li> <li> <p>https://arstechnica.com/gadgets/2024/09/real-time-linux-is-officially-part-of-the-kernel-after-decades-of-debate/\u00a0\u21a9</p> </li> </ol>"}]}